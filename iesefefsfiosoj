[33mcommit 7626be600a6acc8eff7c1324ae398b690e6407e6[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: nstdspace <maksim.rotmann@rwth-aachen.de>
Date:   Sat May 20 01:06:38 2017 +0200

    fixed my project setup...

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..5814594[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,114 @@[m
[32m+[m[32m## Java[m
[32m+[m
[32m+[m[32m*.class[m
[32m+[m[32m*.war[m
[32m+[m[32m*.ear[m
[32m+[m[32mhs_err_pid*[m
[32m+[m
[32m+[m[32m## Robovm[m
[32m+[m[32m/ios/robovm-build/[m
[32m+[m
[32m+[m[32m## GWT[m
[32m+[m[32m/html/war/[m
[32m+[m[32m/html/gwt-unitCache/[m
[32m+[m[32m.apt_generated/[m
[32m+[m[32m.gwt/[m
[32m+[m[32mgwt-unitCache/[m
[32m+[m[32mwww-test/[m
[32m+[m[32m.gwt-tmp/[m
[32m+[m
[32m+[m[32m## Android Studio and Intellij and Android in general[m
[32m+[m[32m/android/libs/armeabi/[m
[32m+[m[32m/android/libs/armeabi-v7a/[m
[32m+[m[32m/android/libs/arm64-v8a/[m
[32m+[m[32m/android/libs/x86/[m
[32m+[m[32m/android/libs/x86_64/[m
[32m+[m[32m/android/gen/[m
[32m+[m[32m.idea/[m
[32m+[m[32m*.ipr[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m/android/out/[m
[32m+[m[32mcom_crashlytics_export_strings.xml[m
[32m+[m
[32m+[m[32m## Eclipse[m
[32m+[m
[32m+[m[32m.classpath[m
[32m+[m[32m.project[m
[32m+[m[32m.metadata/[m
[32m+[m[32m/android/bin/[m
[32m+[m[32m/core/bin/[m
[32m+[m[32m/desktop/bin/[m
[32m+[m[32m/html/bin/[m
[32m+[m[32m/ios/bin/[m
[32m+[m[32m/ios-moe/bin/[m
[32m+[m[32m*.tmp[m
[32m+[m[32m*.bak[m
[32m+[m[32m*.swp[m
[32m+[m[32m*~.nib[m
[32m+[m[32m.settings/[m
[32m+[m[32m.loadpath[m
[32m+[m[32m.externalToolBuilders/[m
[32m+[m[32m*.launch[m
[32m+[m
[32m+[m[32m## NetBeans[m
[32m+[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/android/nbproject/private/[m
[32m+[m[32m/core/nbproject/private/[m
[32m+[m[32m/desktop/nbproject/private/[m
[32m+[m[32m/html/nbproject/private/[m
[32m+[m[32m/ios/nbproject/private/[m
[32m+[m[32m/ios-moe/nbproject/private/[m
[32m+[m
[32m+[m[32m/build/[m
[32m+[m[32m/android/build/[m
[32m+[m[32m/core/build/[m
[32m+[m[32m/desktop/build/[m
[32m+[m[32m/html/build/[m
[32m+[m[32m/ios/build/[m
[32m+[m[32m/ios-moe/build/[m
[32m+[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/android/nbbuild/[m
[32m+[m[32m/core/nbbuild/[m
[32m+[m[32m/desktop/nbbuild/[m
[32m+[m[32m/html/nbbuild/[m
[32m+[m[32m/ios/nbbuild/[m
[32m+[m[32m/ios-moe/nbbuild/[m
[32m+[m
[32m+[m[32m/dist/[m
[32m+[m[32m/android/dist/[m
[32m+[m[32m/core/dist/[m
[32m+[m[32m/desktop/dist/[m
[32m+[m[32m/html/dist/[m
[32m+[m[32m/ios/dist/[m
[32m+[m[32m/ios-moe/dist/[m
[32m+[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/android/nbdist/[m
[32m+[m[32m/core/nbdist/[m
[32m+[m[32m/desktop/nbdist/[m
[32m+[m[32m/html/nbdist/[m
[32m+[m[32m/ios/nbdist/[m
[32m+[m[32m/ios-moe/nbdist/[m
[32m+[m
[32m+[m[32mnbactions.xml[m
[32m+[m[32mnb-configuration.xml[m
[32m+[m
[32m+[m[32m## Gradle[m
[32m+[m
[32m+[m[32m/local.properties[m
[32m+[m[32m.gradle/[m
[32m+[m[32mgradle-app.setting[m
[32m+[m[32m/build/[m
[32m+[m[32m/android/build/[m
[32m+[m[32m/core/build/[m
[32m+[m[32m/desktop/build/[m
[32m+[m[32m/html/build/[m
[32m+[m[32m/ios/build/[m
[32m+[m[32m/ios-moe/build/[m
[32m+[m
[32m+[m[32m## OS Specific[m
[32m+[m[32m.DS_Store[m
[32m+[m[32mThumbs.db[m
[1mdiff --git a/android/AndroidManifest.xml b/android/AndroidManifest.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..9bf8e37[m
[1m--- /dev/null[m
[1m+++ b/android/AndroidManifest.xml[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<manifest xmlns:android="http://schemas.android.com/apk/res/android"[m
[32m+[m[32m    package="de.nstdspace.colorsplash"[m
[32m+[m[32m    android:versionCode="1"[m
[32m+[m[32m    android:versionName="1.0" >[m
[32m+[m
[32m+[m[32m    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="25" />[m
[32m+[m
[32m+[m[32m    <application[m
[32m+[m[32m        android:allowBackup="true"[m
[32m+[m[32m        android:icon="@drawable/ic_launcher"[m
[32m+[m[32m        android:label="@string/app_name"[m
[32m+[m[32m        android:theme="@style/GdxTheme" >[m
[32m+[m[32m        <activity[m
[32m+[m[32m            android:name="de.nstdspace.colorsplash.AndroidLauncher"[m
[32m+[m[32m            android:label="@string/app_name"[m[41m [m
[32m+[m[32m            android:screenOrientation="portrait"[m
[32m+[m[32m            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">[m
[32m+[m[32m            <intent-filter>[m
[32m+[m[32m                <action android:name="android.intent.action.MAIN" />[m
[32m+[m[32m                <category android:name="android.intent.category.LAUNCHER" />[m
[32m+[m[32m            </intent-filter>[m
[32m+[m[32m        </activity>[m
[32m+[m[32m    </application>[m
[32m+[m
[32m+[m[32m</manifest>[m
[1mdiff --git a/android/assets/background.png b/android/assets/background.png[m
[1mnew file mode 100644[m
[1mindex 0000000..f82e1d4[m
Binary files /dev/null and b/android/assets/background.png differ
[1mdiff --git a/android/assets/background.xcf b/android/assets/background.xcf[m
[1mnew file mode 100644[m
[1mindex 0000000..2008799[m
Binary files /dev/null and b/android/assets/background.xcf differ
[1mdiff --git a/android/assets/background2.png b/android/assets/background2.png[m
[1mnew file mode 100644[m
[1mindex 0000000..e558b7e[m
Binary files /dev/null and b/android/assets/background2.png differ
[1mdiff --git a/android/assets/background2.xcf b/android/assets/background2.xcf[m
[1mnew file mode 100644[m
[1mindex 0000000..933364c[m
Binary files /dev/null and b/android/assets/background2.xcf differ
[1mdiff --git a/android/assets/colorbox.png b/android/assets/colorbox.png[m
[1mnew file mode 100644[m
[1mindex 0000000..acefdf7[m
Binary files /dev/null and b/android/assets/colorbox.png differ
[1mdiff --git a/android/assets/colorbox.xcf b/android/assets/colorbox.xcf[m
[1mnew file mode 100644[m
[1mindex 0000000..eb8903e[m
Binary files /dev/null and b/android/assets/colorbox.xcf differ
[1mdiff --git a/android/assets/fonts/Minimoon.ttf b/android/assets/fonts/Minimoon.ttf[m
[1mnew file mode 100644[m
[1mindex 0000000..63cd946[m
Binary files /dev/null and b/android/assets/fonts/Minimoon.ttf differ
[1mdiff --git a/android/build.gradle b/android/build.gradle[m
[1mnew file mode 100644[m
[1mindex 0000000..ea40f2a[m
[1m--- /dev/null[m
[1m+++ b/android/build.gradle[m
[36m@@ -0,0 +1,129 @@[m
[32m+[m[32mandroid {[m
[32m+[m[32m    buildToolsVersion "25.0.3"[m
[32m+[m[32m    compileSdkVersion 25[m
[32m+[m[32m    sourceSets {[m
[32m+[m[32m        main {[m
[32m+[m[32m            manifest.srcFile 'AndroidManifest.xml'[m
[32m+[m[32m            java.srcDirs = ['src'][m
[32m+[m[32m            aidl.srcDirs = ['src'][m
[32m+[m[32m            renderscript.srcDirs = ['src'][m
[32m+[m[32m            res.srcDirs = ['res'][m
[32m+[m[32m            assets.srcDirs = ['assets'][m
[32m+[m[32m            jniLibs.srcDirs = ['libs'][m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        instrumentTest.setRoot('tests')[m
[32m+[m[32m    }[m
[32m+[m[32m    packagingOptions {[m
[32m+[m[32m        exclude 'META-INF/robovm/ios/robovm.xml'[m
[32m+[m[32m    }[m
[32m+[m[32m    defaultConfig {[m
[32m+[m[32m        applicationId "de.nstdspace.colorsplash"[m
[32m+[m[32m        minSdkVersion 9[m
[32m+[m[32m        targetSdkVersion 25[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m// called every time gradle gets executed, takes the native dependencies of[m
[32m+[m[32m// the natives configuration, and extracts them to the proper libs/ folders[m
[32m+[m[32m// so they get packed with the APK.[m
[32m+[m[32mtask copyAndroidNatives() {[m[41m [m
[32m+[m[32m    file("libs/armeabi/").mkdirs();[m
[32m+[m[32m    file("libs/armeabi-v7a/").mkdirs();[m
[32m+[m[32m    file("libs/arm64-v8a/").mkdirs();[m
[32m+[m[32m    file("libs/x86_64/").mkdirs();[m
[32m+[m[32m    file("libs/x86/").mkdirs();[m
[32m+[m
[32m+[m[32m    configurations.natives.files.each { jar ->[m
[32m+[m[32m        def outputDir = null[m
[32m+[m[32m        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")[m
[32m+[m[32m        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")[m[41m        [m
[32m+[m[32m        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")[m
[32m+[m[32m        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")[m
[32m+[m[32m        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")[m
[32m+[m[32m        if(outputDir != null) {[m
[32m+[m[32m            copy {[m
[32m+[m[32m                from zipTree(jar)[m
[32m+[m[32m                into outputDir[m
[32m+[m[32m                include "*.so"[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtask run(type: Exec) {[m
[32m+[m[32m    def path[m
[32m+[m[32m    def localProperties = project.file("../local.properties")[m
[32m+[m[32m    if (localProperties.exists()) {[m
[32m+[m[32m        Properties properties = new Properties()[m
[32m+[m[32m        localProperties.withInputStream { instr ->[m
[32m+[m[32m            properties.load(instr)[m
[32m+[m[32m        }[m
[32m+[m[32m        def sdkDir = properties.getProperty('sdk.dir')[m
[32m+[m[32m        if (sdkDir) {[m
[32m+[m[32m            path = sdkDir[m
[32m+[m[32m        } else {[m
[32m+[m[32m            path = "$System.env.ANDROID_HOME"[m
[32m+[m[32m        }[m
[32m+[m[32m    } else {[m
[32m+[m[32m        path = "$System.env.ANDROID_HOME"[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    def adb = path + "/platform-tools/adb"[m
[32m+[m[32m    commandLine "$adb", 'shell', 'am', 'start', '-n', 'de.nstdspace.colorsplash/de.nstdspace.colorsplash.AndroidLauncher'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// sets up the Android Eclipse project, using the old Ant based build.[m
[32m+[m[32meclipse {[m
[32m+[m[32m    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin[m
[32m+[m[32m    // ignores any nodes added in classpath.file.withXml[m
[32m+[m[32m    sourceSets {[m
[32m+[m[32m        main {[m
[32m+[m[32m            java.srcDirs "src", 'gen'[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    jdt {[m
[32m+[m[32m        sourceCompatibility = 1.6[m
[32m+[m[32m        targetCompatibility = 1.6[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    classpath {[m
[32m+[m[32m        plusConfigurations += [ project.configurations.compile ][m[41m        [m
[32m+[m[32m        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'[m[41m       [m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    project {[m
[32m+[m[32m        name = appName + "-android"[m
[32m+[m[32m        natures 'com.android.ide.eclipse.adt.AndroidNature'[m
[32m+[m[32m        buildCommands.clear();[m
[32m+[m[32m        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"[m
[32m+[m[32m        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"[m
[32m+[m[32m        buildCommand "org.eclipse.jdt.core.javabuilder"[m
[32m+[m[32m        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// sets up the Android Idea project, using the old Ant based build.[m
[32m+[m[32midea {[m
[32m+[m[32m    module {[m
[32m+[m[32m        sourceDirs += file("src");[m
[32m+[m[32m        scopes = [ COMPILE: [plus:[project.configurations.compile]]][m[41m        [m
[32m+[m
[32m+[m[32m        iml {[m
[32m+[m[32m            withXml {[m
[32m+[m[32m                def node = it.asNode()[m
[32m+[m[32m                def builder = NodeBuilder.newInstance();[m
[32m+[m[32m                builder.current = node;[m
[32m+[m[32m                builder.component(name: "FacetManager") {[m
[32m+[m[32m                    facet(type: "android", name: "Android") {[m
[32m+[m[32m                        configuration {[m
[32m+[m[32m                            option(name: "UPDATE_PROPERTY_FILES", value:"true")[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/android/ic_launcher-web.png b/android/ic_launcher-web.png[m
[1mnew file mode 100644[m
[1mindex 0000000..8f0110d[m
Binary files /dev/null and b/android/ic_launcher-web.png differ
[1mdiff --git a/android/proguard-project.txt b/android/proguard-project.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..b166b1e[m
[1m--- /dev/null[m
[1m+++ b/android/proguard-project.txt[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32m# To enable ProGuard in your project, edit project.properties[m
[32m+[m[32m# to define the proguard.config property as described in that file.[m
[32m+[m[32m#[m
[32m+[m[32m# Add project specific ProGuard rules here.[m
[32m+[m[32m# By default, the flags in this file are appended to flags specified[m
[32m+[m[32m# in ${sdk.dir}/tools/proguard/proguard-android.txt[m
[32m+[m[32m# You can edit the include path and order by changing the ProGuard[m
[32m+[m[32m# include property in project.properties.[m
[32m+[m[32m#[m
[32m+[m[32m# For more details, see[m
[32m+[m[32m#   http://developer.android.com/guide/developing/tools/proguard.html[m
[32m+[m
[32m+[m[32m# Add any project specific keep options here:[m
[32m+[m
[32m+[m[32m# If your project uses WebView with JS, uncomment the following[m
[32m+[m[32m# and specify the fully qualified class name to the JavaScript interface[m
[32m+[m[32m# class:[m
[32m+[m[32m#-keepclassmembers class fqcn.of.javascript.interface.for.webview {[m
[32m+[m[32m#   public *;[m
[32m+[m[32m#}[m
[32m+[m
[32m+[m[32m-verbose[m
[32m+[m
[32m+[m[32m-dontwarn android.support.**[m
[32m+[m[32m-dontwarn com.badlogic.gdx.backends.android.AndroidFragmentApplication[m
[32m+[m[32m-dontwarn com.badlogic.gdx.utils.GdxBuild[m
[32m+[m[32m-dontwarn com.badlogic.gdx.physics.box2d.utils.Box2DBuild[m
[32m+[m[32m-dontwarn com.badlogic.gdx.jnigen.BuildTarget*[m
[32m+[m[32m-dontwarn com.badlogic.gdx.graphics.g2d.freetype.FreetypeBuild[m
[32m+[m
[32m+[m[32m-keep class com.badlogic.gdx.controllers.android.AndroidControllers[m
[32m+[m
[32m+[m[32m-keepclassmembers class com.badlogic.gdx.backends.android.AndroidInput* {[m
[32m+[m[32m   <init>(com.badlogic.gdx.Application, android.content.Context, java.lang.Object, com.badlogic.gdx.backends.android.AndroidApplicationConfiguration);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m-keepclassmembers class com.badlogic.gdx.physics.box2d.World {[m
[32m+[m[32m   boolean contactFilter(long, long);[m
[32m+[m[32m   void    beginContact(long);[m
[32m+[m[32m   void    endContact(long);[m
[32m+[m[32m   void    preSolve(long, long);[m
[32m+[m[32m   void    postSolve(long, long);[m
[32m+[m[32m   boolean reportFixture(long);[m
[32m+[m[32m   float   reportRayFixture(long, float, float, float, float, float);[m
[32m+[m[32m}[m
[1mdiff --git a/android/project.properties b/android/project.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..4ab1256[m
[1m--- /dev/null[m
[1m+++ b/android/project.properties[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m# This file is automatically generated by Android Tools.[m
[32m+[m[32m# Do not modify this file -- YOUR CHANGES WILL BE ERASED![m
[32m+[m[32m#[m
[32m+[m[32m# This file must be checked in Version Control Systems.[m
[32m+[m[32m#[m
[32m+[m[32m# To customize properties used by the Ant build system edit[m
[32m+[m[32m# "ant.properties", and override values to adapt the script to your[m
[32m+[m[32m# project structure.[m
[32m+[m[32m#[m
[32m+[m[32m# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):[m
[32m+[m[32m#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt[m
[32m+[m
[32m+[m[32m# Project target.[m
[32m+[m[32mtarget=android-19[m
[1mdiff --git a/android/res/drawable-hdpi/ic_launcher.png b/android/res/drawable-hdpi/ic_launcher.png[m
[1mnew file mode 100644[m
[1mindex 0000000..91f696b[m
Binary files /dev/null and b/android/res/drawable-hdpi/ic_launcher.png differ
[1mdiff --git a/android/res/drawable-mdpi/ic_launcher.png b/android/res/drawable-mdpi/ic_launcher.png[m
[1mnew file mode 100644[m
[1mindex 0000000..c1ab239[m
Binary files /dev/null and b/android/res/drawable-mdpi/ic_launcher.png differ
[1mdiff --git a/android/res/drawable-xhdpi/ic_launcher.png b/android/res/drawable-xhdpi/ic_launcher.png[m
[1mnew file mode 100644[m
[1mindex 0000000..2011cc0[m
Binary files /dev/null and b/android/res/drawable-xhdpi/ic_launcher.png differ
[1mdiff --git a/android/res/drawable-xxhdpi/ic_launcher.png b/android/res/drawable-xxhdpi/ic_launcher.png[m
[1mnew file mode 100644[m
[1mindex 0000000..25fcef0[m
Binary files /dev/null and b/android/res/drawable-xxhdpi/ic_launcher.png differ
[1mdiff --git a/android/res/drawable-xxxhdpi/ic_launcher.png b/android/res/drawable-xxxhdpi/ic_launcher.png[m
[1mnew file mode 100644[m
[1mindex 0000000..d109946[m
Binary files /dev/null and b/android/res/drawable-xxxhdpi/ic_launcher.png differ
[1mdiff --git a/android/res/values/strings.xml b/android/res/values/strings.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..ee54911[m
[1m--- /dev/null[m
[1m+++ b/android/res/values/strings.xml[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<resources>[m
[32m+[m
[32m+[m[32m    <string name="app_name">ColorSplash</string>[m
[32m+[m
[32m+[m[32m</resources>[m
[1mdiff --git a/android/res/values/styles.xml b/android/res/values/styles.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..3f00fc5[m
[1m--- /dev/null[m
[1m+++ b/android/res/values/styles.xml[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m<resources>[m
[32m+[m
[32m+[m[32m    <style name="GdxTheme" parent="android:Theme">[m
[32m+[m		[32m<item name="android:windowBackground">@android:color/transparent</item>[m
[32m+[m[32m        <item name="android:colorBackgroundCacheHint">@null</item>[m
[32m+[m[32m        <item name="android:windowAnimationStyle">@android:style/Animation</item>[m
[32m+[m[32m        <item name="android:windowNoTitle">true</item>[m
[32m+[m[32m        <item name="android:windowContentOverlay">@null</item>[m
[32m+[m[32m        <item name="android:windowFullscreen">true</item>[m
[32m+[m[32m    </style>[m
[32m+[m
[32m+[m[32m</resources>[m
[1mdiff --git a/android/src/de/nstdspace/colorsplash/AndroidLauncher.java b/android/src/de/nstdspace/colorsplash/AndroidLauncher.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4e7607b[m
[1m--- /dev/null[m
[1m+++ b/android/src/de/nstdspace/colorsplash/AndroidLauncher.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash;[m
[32m+[m
[32m+[m[32mimport android.os.Bundle;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.backends.android.AndroidApplication;[m
[32m+[m[32mimport com.badlogic.gdx.backends.android.AndroidApplicationConfiguration;[m
[32m+[m
[32m+[m[32mpublic class AndroidLauncher extends AndroidApplication {[m
[32m+[m	[32m@Override[m
[32m+[m	[32mprotected void onCreate (Bundle savedInstanceState) {[m
[32m+[m		[32msuper.onCreate(savedInstanceState);[m
[32m+[m		[32mAndroidApplicationConfiguration config = new AndroidApplicationConfiguration();[m
[32m+[m		[32minitialize(new ColorSplashGame(), config);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/build.gradle b/build.gradle[m
[1mnew file mode 100644[m
[1mindex 0000000..bdc4993[m
[1m--- /dev/null[m
[1m+++ b/build.gradle[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32mbuildscript {[m
[32m+[m[32m    repositories {[m
[32m+[m[32m        mavenLocal()[m
[32m+[m[32m        mavenCentral()[m
[32m+[m[32m        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }[m
[32m+[m[32m        jcenter()[m
[32m+[m[32m    }[m
[32m+[m[32m    dependencies {[m
[32m+[m[32m        classpath 'com.android.tools.build:gradle:2.3.2'[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mallprojects {[m
[32m+[m[32m    apply plugin: "eclipse"[m
[32m+[m[32m    apply plugin: "idea"[m
[32m+[m
[32m+[m[32m    version = '1.0'[m
[32m+[m[32m    ext {[m
[32m+[m[32m        appName = "ColorSplash"[m
[32m+[m[32m        gdxVersion = '1.9.6'[m
[32m+[m[32m        roboVMVersion = '2.3.0'[m
[32m+[m[32m        box2DLightsVersion = '1.4'[m
[32m+[m[32m        ashleyVersion = '1.7.0'[m
[32m+[m[32m        aiVersion = '1.8.0'[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    repositories {[m
[32m+[m[32m        mavenLocal()[m
[32m+[m[32m        mavenCentral()[m
[32m+[m[32m        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }[m
[32m+[m[32m        maven { url "https://oss.sonatype.org/content/repositories/releases/" }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mproject(":desktop") {[m
[32m+[m[32m    apply plugin: "java"[m
[32m+[m
[32m+[m
[32m+[m[32m    dependencies {[m
[32m+[m[32m        compile project(":core")[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"[m
[32m+[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mproject(":android") {[m
[32m+[m[32m    apply plugin: "android"[m
[32m+[m
[32m+[m[32m    configurations { natives }[m
[32m+[m
[32m+[m[32m    dependencies {[m
[32m+[m[32m        compile project(":core")[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"[m
[32m+[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"[m
[32m+[m[32m        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mproject(":core") {[m
[32m+[m[32m    apply plugin: "java"[m
[32m+[m
[32m+[m
[32m+[m[32m    dependencies {[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx:$gdxVersion"[m
[32m+[m
[32m+[m[32m        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtasks.eclipse.doLast {[m
[32m+[m[32m    delete ".project"[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/build.gradle b/core/build.gradle[m
[1mnew file mode 100644[m
[1mindex 0000000..03cd1be[m
[1m--- /dev/null[m
[1m+++ b/core/build.gradle[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mapply plugin: "java"[m
[32m+[m
[32m+[m[32msourceCompatibility = 1.6[m
[32m+[m[32m[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'[m
[32m+[m
[32m+[m[32msourceSets.main.java.srcDirs = [ "src/" ][m
[32m+[m
[32m+[m
[32m+[m[32meclipse.project {[m
[32m+[m[32m    name = appName + "-core"[m
[32m+[m[32m}[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/ColorSplashGame.java b/core/src/de/nstdspace/colorsplash/ColorSplashGame.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2e6c95a[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/ColorSplashGame.java[m
[36m@@ -0,0 +1,107 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.ApplicationAdapter;[m
[32m+[m[32mimport com.badlogic.gdx.Gdx;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.GL20;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.OrthographicCamera;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Texture;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.BitmapFont;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.SpriteBatch;[m
[32m+[m[32m//import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;[m
[32m+[m[32mimport com.badlogic.gdx.math.Interpolation;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Stage;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.actions.Actions;[m
[32m+[m[32mimport com.badlogic.gdx.utils.viewport.FitViewport;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m
[32m+[m[32mimport de.nstdspace.colorsplash.game.DefaultGameMode;[m
[32m+[m[32mimport de.nstdspace.colorsplash.game.GameListener;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.subftrs.GuiViewContext;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.subftrs.IntroViewContext;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.subftrs.ViewContextListener;[m
[32m+[m
[32m+[m[32mpublic class ColorSplashGame extends ApplicationAdapter implements GameListener {[m
[32m+[m
[32m+[m	[32mprivate Stage gameStage;[m
[32m+[m	[32mprivate DefaultGameMode gameMode;[m
[32m+[m	[32mprivate SpriteBatch batch;[m
[32m+[m	[32mprivate BitmapFont defaultFont;[m
[32m+[m
[32m+[m	[32mpublic static float VIEWPORT_WIDTH = 720;[m
[32m+[m	[32mpublic static float VIEWPORT_HEIGHT = 1280;[m
[32m+[m
[32m+[m	[32m@Override[m
[32m+[m	[32mpublic void create() {[m
[32m+[m		[32msuper.create();[m
[32m+[m
[32m+[m		[32mOrthographicCamera camera = new OrthographicCamera();[m
[32m+[m		[32mcamera.setToOrtho(true, VIEWPORT_WIDTH, VIEWPORT_HEIGHT);[m
[32m+[m		[32m//TODO: choose best viewport..[m
[32m+[m		[32mFitViewport viewport = new FitViewport(VIEWPORT_WIDTH, VIEWPORT_HEIGHT, camera);[m
[32m+[m		[32mgameStage = new Stage(viewport);[m
[32m+[m
[32m+[m		[32mArrayList<Color> colorList = new ArrayList<Color>();[m
[32m+[m		[32mcolorList.add(Color.RED);[m
[32m+[m		[32mcolorList.add(Color.GREEN);[m
[32m+[m		[32mcolorList.add(Color.BLUE);[m
[32m+[m		[32mcolorList.add(Color.BROWN);[m
[32m+[m		[32mgameMode = new DefaultGameMode(colorList, Color.RED);[m
[32m+[m		[32mgameMode.addGameListener(this);[m
[32m+[m
[32m+[m		[32mloadResources();[m
[32m+[m[32m//[m
[32m+[m		[32mfinal IntroViewContext introViewContext = new IntroViewContext(defaultFont);[m
[32m+[m		[32mintroViewContext.setSubViewListener(new ViewContextListener() {[m
[32m+[m			[32m@Override[m
[32m+[m			[32mpublic void onCreate() {[m
[32m+[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m@Override[m
[32m+[m			[32mpublic void onDispose() {[m
[32m+[m				[32mgameStage.addActor(new GuiViewContext(gameMode.getGameField().getStylesheet()));[m
[32m+[m				[32mgameStage.addActor(gameMode.getGameField());[m
[32m+[m				[32mintroViewContext.addAction(Actions.removeActor());[m
[32m+[m			[32m}[m
[32m+[m		[32m});[m
[32m+[m		[32mgameStage.addActor(introViewContext);[m
[32m+[m
[32m+[m		[32mbatch = new SpriteBatch();[m
[32m+[m		[32mGdx.input.setInputProcessor(gameStage);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mprivate void loadResources(){[m
[32m+[m[32m//		FreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();[m
[32m+[m[32m//		parameter.size = 70;[m
[32m+[m[32m//		parameter.minFilter = Texture.TextureFilter.Nearest;[m
[32m+[m[32m//		parameter.magFilter = Texture.TextureFilter.MipMapLinearNearest;[m
[32m+[m[32m//		parameter.flip = true;[m
[32m+[m[32m//		parameter.color = Color.WHITE;[m
[32m+[m[32m//		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("fonts/Minimoon.ttf"));[m
[32m+[m[32m//		defaultFont = generator.generateFont(parameter);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m
[32m+[m	[32m@Override[m
[32m+[m	[32mpublic void gameFinished() {[m
[32m+[m		[32mGdx.app.log("FINISH!", "PS: you are a noob.");[m
[32m+[m		[32mgameStage.addAction(Actions.moveBy(0, 1000, 1f, Interpolation.fade));[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m
[32m+[m	[32m@Override[m
[32m+[m	[32mpublic void render() {[m
[32m+[m		[32mGdx.gl.glClearColor(0.0f, 1.0f, 0.0f, 1.0f);[m
[32m+[m		[32mGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);[m
[32m+[m
[32m+[m		[32mgameStage.act();[m
[32m+[m		[32mgameStage.draw();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m@Override[m
[32m+[m	[32mpublic void dispose() {[m
[32m+[m		[32msuper.dispose();[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/game/DefaultGameMode.java b/core/src/de/nstdspace/colorsplash/game/DefaultGameMode.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9d1cba3[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/game/DefaultGameMode.java[m
[36m@@ -0,0 +1,97 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.game;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.Gdx;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.math.Interpolation;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.actions.Actions;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.DefaultColorBox;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.DefaultStylesheet;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.GameField;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.GameFieldListener;[m
[32m+[m
[32m+[m[32mpublic class DefaultGameMode implements GameFieldListener {[m
[32m+[m
[32m+[m[32m    private GameListener gameListener;[m
[32m+[m[32m    private GameField gameField;[m
[32m+[m
[32m+[m[32m    private Color gameEndFillColor;[m
[32m+[m[32m    private HashMap<Color, Color> colorSwitchMap;[m
[32m+[m
[32m+[m[32m    public DefaultGameMode(ArrayList<Color> colors){[m
[32m+[m[32m        this(colors, colors.get(0));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public DefaultGameMode(ArrayList<Color> colors, Color gameEndFillColor){[m
[32m+[m[32m        this.gameEndFillColor = gameEndFillColor;[m
[32m+[m[32m        createColorSwitchMap(colors);[m
[32m+[m[32m        createGameField();[m
[32m+[m
[32m+[m[32m        //TODO: make level system and so on[m
[32m+[m[32m        gameField.shuffle(GameField.ChangePattern.CROSS_SURROUND, colorSwitchMap, 100);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private void createGameField(){[m
[32m+[m[32m        gameField = new GameField();[m
[32m+[m[32m        gameField.create(new DefaultStylesheet());[m
[32m+[m[32m        gameField.addGameFieldListener(this);[m
[32m+[m[32m        gameField.fill(gameEndFillColor);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private void createColorSwitchMap(ArrayList<Color> colors){[m
[32m+[m[32m        colorSwitchMap = new HashMap<Color, Color>();[m
[32m+[m[32m        for(int i = 0; i < colors.size(); i++){[m
[32m+[m[32m            if(i == colors.size() - 1) colorSwitchMap.put(colors.get(i), colors.get(0));[m
[32m+[m[32m            else colorSwitchMap.put(colors.get(i), colors.get(i + 1));[m
[32m+[m[32m        }[m
[32m+[m[32m        Gdx.app.log("colorSwitchMap: ", colorSwitchMap.toString());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void handleFieldTap(int x, int y){[m
[32m+[m[32m        gameField.changeColors(x, y, GameField.ChangePattern.CROSS_SURROUND, colorSwitchMap);[m
[32m+[m
[32m+[m[32m        //only a test.[m
[32m+[m[32m        gameField.getColorBox(x, y).addAction(Actions.sequence([m
[32m+[m[32m                Actions.scaleTo(0.7f, 0.7f, 0.1f, Interpolation.fade),[m
[32m+[m[32m                Actions.scaleTo(1.1f, 1.1f, 0.1f, Interpolation.fade),[m
[32m+[m[32m                Actions.scaleTo(0.8f, 0.8f, 0.1f, Interpolation.fade),[m
[32m+[m[32m                Actions.scaleTo(1.0f, 1.0f, 0.1f, Interpolation.fade)));[m
[32m+[m
[32m+[m[32m        if(checkGameFieldPattern(defaultPattern)){[m
[32m+[m[32m            gameListener.gameFinished();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public GameField getGameField(){[m
[32m+[m[32m        return gameField;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void addGameListener(GameListener listener){[m
[32m+[m[32m        this.gameListener = listener;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private GameFieldPattern defaultPattern = new GameFieldPattern() {[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public boolean checkBox(DefaultColorBox box) {[m
[32m+[m[32m            return box.getGameColor().equals(gameEndFillColor);[m
[32m+[m[32m        }[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    private boolean checkGameFieldPattern(GameFieldPattern pattern){[m
[32m+[m[32m        DefaultColorBox colorBoxGrid[][] = gameField.getBoxGrid();[m
[32m+[m[32m        for(DefaultColorBox row[] : colorBoxGrid){[m
[32m+[m[32m            for(DefaultColorBox box : row){[m
[32m+[m[32m                if(!pattern.checkBox(box)) return false;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    interface GameFieldPattern {[m
[32m+[m[32m        boolean checkBox(DefaultColorBox box);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/game/GameListener.java b/core/src/de/nstdspace/colorsplash/game/GameListener.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3cd05a8[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/game/GameListener.java[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.game;[m
[32m+[m
[32m+[m[32mpublic interface GameListener {[m
[32m+[m
[32m+[m[32m    void gameFinished();[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/DefaultColorBox.java b/core/src/de/nstdspace/colorsplash/view/DefaultColorBox.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2b7ffc9[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/DefaultColorBox.java[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.Batch;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.actions.Actions;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.ui.Image;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;[m
[32m+[m
[32m+[m[32mpublic class DefaultColorBox extends Image {[m
[32m+[m
[32m+[m[32m    public int fieldPositionX;[m
[32m+[m[32m    public int fieldPositionY;[m
[32m+[m[32m    public Color gameColor;[m
[32m+[m
[32m+[m[32m    public DefaultColorBox(int fieldPositionX, int fieldPositionY, TextureRegionDrawable texture){[m
[32m+[m[32m        this.fieldPositionX = fieldPositionX;[m
[32m+[m[32m        this.fieldPositionY = fieldPositionY;[m
[32m+[m[32m        setDrawable(texture);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void setColor(Color color) {[m
[32m+[m[32m//        super.setColor(color);[m
[32m+[m
[32m+[m[32m        //only test[m
[32m+[m[32m        addAction(Actions.color(color, 0.3f));[m
[32m+[m[32m        gameColor = color;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Color getGameColor(){[m
[32m+[m[32m        return gameColor;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void draw(Batch batch, float parentAlpha){[m
[32m+[m[32m        batch.setColor(getColor());[m
[32m+[m[32m        super.draw(batch, parentAlpha);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/DefaultStylesheet.java b/core/src/de/nstdspace/colorsplash/view/DefaultStylesheet.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b635308[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/DefaultStylesheet.java[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Texture;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.TextureRegion;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * offers style data for different usages.[m
[32m+[m[32m * TODO: split into different things for different use cases[m
[32m+[m[32m */[m
[32m+[m[32mpublic class DefaultStylesheet implements Stylesheet {[m
[32m+[m
[32m+[m[32m    private static Texture backgroundTexture;[m
[32m+[m[32m    private static TextureRegionDrawable colorBoxTextureRegionDrawable;[m
[32m+[m
[32m+[m[32m    public DefaultStylesheet(){[m
[32m+[m[32m        createTextures();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private void createTextures(){[m
[32m+[m[32m        backgroundTexture = ResourceTools.loadTexture("background2.png");[m
[32m+[m[32m        colorBoxTextureRegionDrawable = new TextureRegionDrawable(new TextureRegion(ResourceTools.loadTexture("colorbox.png")));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public Texture getBackgroundTexture() {[m
[32m+[m[32m        return backgroundTexture;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public TextureRegionDrawable getColorBoxTexture() {[m
[32m+[m[32m        return colorBoxTextureRegionDrawable;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/GameField.java b/core/src/de/nstdspace/colorsplash/view/GameField.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3931f64[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/GameField.java[m
[36m@@ -0,0 +1,146 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.Batch;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Event;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.EventListener;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Group;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.InputEvent;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Random;[m
[32m+[m
[32m+[m[32mimport de.nstdspace.colorsplash.ColorSplashGame;[m
[32m+[m
[32m+[m[32mpublic class GameField extends Group {[m
[32m+[m
[32m+[m[32m    private float boardSize = ColorSplashGame.VIEWPORT_WIDTH * 0.8f;[m
[32m+[m[32m    private int gridSize = 5;[m
[32m+[m[32m    private float boxSize = boardSize / gridSize;[m
[32m+[m
[32m+[m[32m    //bottom left: (0, 0)[m
[32m+[m[32m    private DefaultColorBox[][] boxGrid = new DefaultColorBox[gridSize][gridSize];[m
[32m+[m
[32m+[m[32m    private GameFieldListener gameFieldListener;[m
[32m+[m
[32m+[m[32m    private Stylesheet stylesheet;[m
[32m+[m
[32m+[m[32m    public GameField(){[m
[32m+[m[32m        setPosition((ColorSplashGame.VIEWPORT_WIDTH - boardSize) / 2, (ColorSplashGame.VIEWPORT_HEIGHT - boardSize) / 2);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void create(Stylesheet stylesheet){[m
[32m+[m[32m        this.stylesheet = stylesheet;[m
[32m+[m[32m        create();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void draw(Batch batch, float parentAlpha){[m
[32m+[m[32m        super.draw(batch, parentAlpha);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void addGameFieldListener(GameFieldListener listener){[m
[32m+[m[32m        this.gameFieldListener = listener;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void create(){[m
[32m+[m[32m        for(int i = 0; i < gridSize; i++){[m
[32m+[m[32m            for(int j = 0; j < gridSize; j++){[m
[32m+[m[32m                final DefaultColorBox box = new DefaultColorBox(i, j, stylesheet.getColorBoxTexture());[m
[32m+[m[32m                box.setColor(Color.BLACK);[m
[32m+[m[32m                box.setSize(boxSize, boxSize);[m
[32m+[m[32m                box.setOrigin(box.getWidth() * 0.5f, box.getHeight() * 0.5f);[m
[32m+[m[32m                box.setPosition(i * boxSize, j * boxSize);[m
[32m+[m[32m                box.addListener(new EventListener(){[m
[32m+[m[32m                    @Override[m
[32m+[m[32m                    public boolean handle(Event event){[m
[32m+[m[32m                        if(gameFieldListener != null && ((InputEvent) event).getType() == InputEvent.Type.touchDown)[m
[32m+[m[32m                            gameFieldListener.handleFieldTap(box.fieldPositionX, box.fieldPositionY);[m
[32m+[m[32m                        return false;[m
[32m+[m[32m                    }[m
[32m+[m[32m                });[m
[32m+[m[32m                addActor(box);[m
[32m+[m[32m                boxGrid[j][i] = box;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void changeColors(int x, int y, ChangePattern pattern, HashMap<Color, Color> colorSwitchMap){[m
[32m+[m[32m        for(int dir[] : pattern.getAffectedDirections()){[m
[32m+[m[32m            int arrayX = x + dir[0], arrayY = y + dir[1];[m
[32m+[m[32m            if(arrayX >= 0 && arrayX < boxGrid.length && arrayY >= 0 && arrayY < boxGrid.length){[m
[32m+[m[32m                boxGrid[arrayY][arrayX].setColor(colorSwitchMap.get(boxGrid[arrayY][arrayX].getGameColor()));[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void shuffle(ChangePattern pattern, HashMap<Color, Color> colorSwitchMap, int count){[m
[32m+[m[32m        Random random = new Random();[m
[32m+[m[32m        for(int i = 0; i < count; i++){[m
[32m+[m[32m            int y = random.nextInt(boxGrid.length);[m
[32m+[m[32m            int x = random.nextInt(boxGrid[y].length);[m
[32m+[m[32m            changeColors(y, x, pattern, colorSwitchMap);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void fill(final Color color){[m
[32m+[m[32m        iterateBoxGrid(new BoxAction() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public boolean filter(DefaultColorBox box) {[m
[32m+[m[32m                return true;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void apply(DefaultColorBox box) {[m
[32m+[m[32m                box.setColor(color);[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void iterateBoxGrid(BoxAction action){[m
[32m+[m[32m        for(int i = 0; i < boxGrid.length; i++){[m
[32m+[m[32m            for(int j = 0; j < boxGrid[i].length; j++){[m
[32m+[m[32m                if(action.filter(boxGrid[j][i])) action.apply(boxGrid[j][i]);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public interface BoxAction {[m
[32m+[m[32m        boolean filter(DefaultColorBox box);[m
[32m+[m[32m        void apply(DefaultColorBox box);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public DefaultColorBox[][] getBoxGrid(){[m
[32m+[m[32m        return boxGrid;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Stylesheet getStylesheet(){[m
[32m+[m[32m        return stylesheet;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public DefaultColorBox getColorBox(int x, int y){[m
[32m+[m[32m        return boxGrid[y][x];[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * This represents how the boxes around[m
[32m+[m[32m     * a tapped box are affected eg if it is tapped[m
[32m+[m[32m     * (or the change event is triggered)[m
[32m+[m[32m     *[m
[32m+[m[32m     * TODO: find good name for this. extract class when clean.[m
[32m+[m[32m     */[m
[32m+[m[32m    public static class ChangePattern {[m
[32m+[m
[32m+[m[32m        public static ChangePattern CROSS_SURROUND = new ChangePattern(new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1}});[m
[32m+[m
[32m+[m[32m        private int affectedDirections[][];[m
[32m+[m
[32m+[m[32m        public ChangePattern(int affectedDirections[][]){[m
[32m+[m[32m            this.affectedDirections = affectedDirections;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public int[][] getAffectedDirections(){[m
[32m+[m[32m            return affectedDirections;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/GameFieldListener.java b/core/src/de/nstdspace/colorsplash/view/GameFieldListener.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cac27b5[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/GameFieldListener.java[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mpublic interface GameFieldListener {[m
[32m+[m
[32m+[m[32m    void handleFieldTap(int x, int y);[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/ResourceTools.java b/core/src/de/nstdspace/colorsplash/view/ResourceTools.java[m
[1mnew file mode 100644[m
[1mindex 0000000..12d1d17[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/ResourceTools.java[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.Gdx;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Pixmap;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Texture;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.TextureRegion;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m
[32m+[m[32mpublic class ResourceTools {[m
[32m+[m
[32m+[m[32m    public static TextureRegionDrawable textureToDrawable(Texture texture){[m
[32m+[m[32m        return new TextureRegionDrawable(new TextureRegion(texture));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Texture createOneColoredTexture(Color c){[m
[32m+[m[32m        Pixmap pixmap = new Pixmap(1, 1, Pixmap.Format.RGBA8888);[m
[32m+[m[32m        pixmap.setColor(c);[m
[32m+[m[32m        pixmap.fill();[m
[32m+[m[32m        Texture texture = new Texture(pixmap);[m
[32m+[m[32m        pixmap.dispose();[m
[32m+[m[32m        return texture;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Texture loadTexture(String name){[m
[32m+[m[32m        return new Texture(Gdx.files.internal(name));[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/Stylesheet.java b/core/src/de/nstdspace/colorsplash/view/Stylesheet.java[m
[1mnew file mode 100644[m
[1mindex 0000000..42bcbba[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/Stylesheet.java[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Texture;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;[m
[32m+[m
[32m+[m[32mpublic interface Stylesheet {[m
[32m+[m
[32m+[m[32m    TextureRegionDrawable getColorBoxTexture();[m
[32m+[m[32m    Texture getBackgroundTexture();[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/subftrs/GuiViewContext.java b/core/src/de/nstdspace/colorsplash/view/subftrs/GuiViewContext.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7c6711d[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/subftrs/GuiViewContext.java[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view.subftrs;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Color;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.Texture;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.Batch;[m
[32m+[m
[32m+[m[32mimport de.nstdspace.colorsplash.ColorSplashGame;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.ResourceTools;[m
[32m+[m[32mimport de.nstdspace.colorsplash.view.Stylesheet;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * maybe give the Gui an own Stage?[m
[32m+[m[32m * many pros and cons about here.. gonna think about it.[m
[32m+[m[32m */[m
[32m+[m[32mpublic class GuiViewContext extends ViewContext {[m
[32m+[m
[32m+[m[32m    private Stylesheet stylesheet;[m
[32m+[m[32m    //TODO: move to stylesheet[m
[32m+[m[32m    private Texture guiBackground;[m
[32m+[m
[32m+[m[32m    public GuiViewContext(Stylesheet stylesheet){[m
[32m+[m[32m        this.stylesheet = stylesheet;[m
[32m+[m[32m        guiBackground = ResourceTools.createOneColoredTexture(new Color(0, 0, 0, 0.35f));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void draw(Batch batch, float parentAlpha) {[m
[32m+[m[32m        super.draw(batch, parentAlpha);[m
[32m+[m[32m        batch.setColor(Color.WHITE);[m
[32m+[m[32m        batch.draw(stylesheet.getBackgroundTexture(), 0, 0);[m
[32m+[m[32m        batch.draw(guiBackground, 0, 0, ColorSplashGame.VIEWPORT_WIDTH, 100);[m
[32m+[m[32m        batch.draw(guiBackground, 0, ColorSplashGame.VIEWPORT_HEIGHT - 100, ColorSplashGame.VIEWPORT_WIDTH, 100);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/subftrs/IntroViewContext.java b/core/src/de/nstdspace/colorsplash/view/subftrs/IntroViewContext.java[m
[1mnew file mode 100644[m
[1mindex 0000000..986ccad[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/subftrs/IntroViewContext.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view.subftrs;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.Gdx;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.Batch;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.BitmapFont;[m
[32m+[m[32mimport com.badlogic.gdx.graphics.g2d.GlyphLayout;[m
[32m+[m[32mimport com.badlogic.gdx.math.Interpolation;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Action;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Actor;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Group;[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.actions.Actions;[m
[32m+[m
[32m+[m[32mimport de.nstdspace.colorsplash.ColorSplashGame;[m
[32m+[m
[32m+[m[32mpublic class IntroViewContext extends ViewContext {[m
[32m+[m
[32m+[m[32m    private String introText = "~ ColorSplash ~";[m
[32m+[m[32m//    private BitmapFont font;[m
[32m+[m
[32m+[m[32m    //TODO: maybe bit bad[m
[32m+[m[32m    private Actor actor;[m
[32m+[m
[32m+[m[32m    public IntroViewContext(BitmapFont font){[m
[32m+[m[32m//        this.font = font;[m
[32m+[m[32m//        GlyphLayout layout = new GlyphLayout();[m
[32m+[m[32m//        layout.setText(font, introText);[m
[32m+[m[32m//        float moveX = layout.width + (ColorSplashGame.VIEWPORT_WIDTH - layout.width) / 2;[m
[32m+[m[32m        actor = new Actor();[m
[32m+[m[32m//        actor.setPosition(-layout.width, ColorSplashGame.VIEWPORT_HEIGHT / 2 - layout.height / 2);[m
[32m+[m[32m//        Action action =[m
[32m+[m[32m//                Actions.sequence([m
[32m+[m[32m//                    Actions.moveBy(moveX, 0, 1.5f, Interpolation.pow2),[m
[32m+[m[32m//                    Actions.moveBy(moveX, 0, 1.5f, Interpolation.pow2)[m
[32m+[m[32m//                );[m
[32m+[m[32m//        actor.addAction(action);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void draw(Batch batch, float parentAlpha) {[m
[32m+[m[32m        super.draw(batch, parentAlpha);[m
[32m+[m[32m        actor.act(Gdx.graphics.getDeltaTime());[m
[32m+[m[32m//        font.draw(batch, introText, actor.getX(), actor.getY());[m
[32m+[m[32m        if(!actor.hasActions()) onDispose();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContext.java b/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContext.java[m
[1mnew file mode 100644[m
[1mindex 0000000..56d2ddf[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContext.java[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view.subftrs;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.scenes.scene2d.Group;[m
[32m+[m
[32m+[m[32mpublic abstract class ViewContext extends Group {[m
[32m+[m
[32m+[m[32m    private ViewContextListener listener;[m
[32m+[m
[32m+[m[32m    public ViewContext(){[m
[32m+[m[32m        listener = new ViewContextListener() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void onCreate() {[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void onDispose() {[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        };[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    protected void onCreate(){[m
[32m+[m[32m        listener.onCreate();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    protected void onDispose(){[m
[32m+[m[32m        listener.onDispose();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void setSubViewListener(ViewContextListener listener){[m
[32m+[m[32m        this.listener = listener;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContextListener.java b/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContextListener.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0837c0e[m
[1m--- /dev/null[m
[1m+++ b/core/src/de/nstdspace/colorsplash/view/subftrs/ViewContextListener.java[m
[36m@@ -0,0 +1,7 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.view.subftrs;[m
[32m+[m
[32m+[m[32mpublic interface ViewContextListener {[m
[32m+[m
[32m+[m[32m    void onCreate();[m
[32m+[m[32m    void onDispose();[m
[32m+[m[32m}[m
[1mdiff --git a/desktop/build.gradle b/desktop/build.gradle[m
[1mnew file mode 100644[m
[1mindex 0000000..f7448b9[m
[1m--- /dev/null[m
[1m+++ b/desktop/build.gradle[m
[36m@@ -0,0 +1,55 @@[m
[32m+[m[32mapply plugin: "java"[m
[32m+[m
[32m+[m[32msourceCompatibility = 1.6[m
[32m+[m[32msourceSets.main.java.srcDirs = [ "src/" ][m
[32m+[m
[32m+[m[32mproject.ext.mainClassName = "de.nstdspace.colorsplash.desktop.DesktopLauncher"[m
[32m+[m[32mproject.ext.assetsDir = new File("../android/assets");[m
[32m+[m
[32m+[m[32mtask run(dependsOn: classes, type: JavaExec) {[m
[32m+[m[32m    main = project.mainClassName[m
[32m+[m[32m    classpath = sourceSets.main.runtimeClasspath[m
[32m+[m[32m    standardInput = System.in[m
[32m+[m[32m    workingDir = project.assetsDir[m
[32m+[m[32m    ignoreExitValue = true[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtask debug(dependsOn: classes, type: JavaExec) {[m
[32m+[m[32m    main = project.mainClassName[m
[32m+[m[32m    classpath = sourceSets.main.runtimeClasspath[m
[32m+[m[32m    standardInput = System.in[m
[32m+[m[32m    workingDir = project.assetsDir[m
[32m+[m[32m    ignoreExitValue = true[m
[32m+[m[32m    debug = true[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtask dist(type: Jar) {[m
[32m+[m[32m    from files(sourceSets.main.output.classesDir)[m
[32m+[m[32m    from files(sourceSets.main.output.resourcesDir)[m
[32m+[m[32m    from {configurations.compile.collect {zipTree(it)}}[m
[32m+[m[32m    from files(project.assetsDir);[m
[32m+[m[41m [m
[32m+[m[32m    manifest {[m
[32m+[m[32m        attributes 'Main-Class': project.mainClassName[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdist.dependsOn classes[m
[32m+[m
[32m+[m[32meclipse {[m
[32m+[m[32m    project {[m
[32m+[m[32m        name = appName + "-desktop"[m
[32m+[m[32m        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtask afterEclipseImport(description: "Post processing after project generation", group: "IDE") {[m
[32m+[m[32m  doLast {[m
[32m+[m[32m    def classpath = new XmlParser().parse(file(".classpath"))[m
[32m+[m[32m    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);[m
[32m+[m[32m    def writer = new FileWriter(file(".classpath"))[m
[32m+[m[32m    def printer = new XmlNodePrinter(new PrintWriter(writer))[m
[32m+[m[32m    printer.setPreserveWhitespace(true)[m
[32m+[m[32m    printer.print(classpath)[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/desktop/src/de/nstdspace/colorsplash/desktop/DesktopLauncher.java b/desktop/src/de/nstdspace/colorsplash/desktop/DesktopLauncher.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bf16ccf[m
[1m--- /dev/null[m
[1m+++ b/desktop/src/de/nstdspace/colorsplash/desktop/DesktopLauncher.java[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mpackage de.nstdspace.colorsplash.desktop;[m
[32m+[m
[32m+[m[32mimport com.badlogic.gdx.backends.lwjgl.LwjglApplication;[m
[32m+[m[32mimport com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;[m
[32m+[m
[32m+[m[32mpublic class DesktopLauncher {[m
[32m+[m	[32mpublic static void main (String[] arg) {[m
[32m+[m		[32mLwjglApplicationConfiguration config = new LwjglApplicationConfiguration();[m
[32m+[m		[32mnew LwjglApplication(new ColorSplashGame(), config);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/gradle.properties b/gradle.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..339fa15[m
[1m--- /dev/null[m
[1m+++ b/gradle.properties[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32morg.gradle.daemon=true[m
[32m+[m[32morg.gradle.jvmargs=-Xms128m -Xmx1500m[m
[32m+[m[32morg.gradle.configureondemand=true[m
[1mdiff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar[m
[1mnew file mode 100644[m
[1mindex 0000000..b979729[m
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
[1mdiff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..339d8eb[m
[1m--- /dev/null[m
[1m+++ b/gradle/wrapper/gradle-wrapper.properties[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m#Fri May 19 17:22:03 CEST 2017[m
[32m+[m[32mdistributionBase=GRADLE_USER_HOME[m
[32m+[m[32mdistributionPath=wrapper/dists[m
[32m+[m[32mzipStoreBase=GRADLE_USER_HOME[m
[32m+[m[32mzipStorePath=wrapper/dists[m
[32m+[m[32mdistributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip[m
[1mdiff --git a/gradlew b/gradlew[m
[1mnew file mode 100644[m
[1mindex 0000000..91a7e26[m
[1m--- /dev/null[m
[1m+++ b/gradlew[m
[36m@@ -0,0 +1,164 @@[m
[32m+[m[32m#!/usr/bin/env bash[m
[32m+[m
[32m+[m[32m##############################################################################[m
[32m+[m[32m##[m
[32m+[m[32m##  Gradle start up script for UN*X[m
[32m+[m[32m##[m
[32m+[m[32m##############################################################################[m
[32m+[m
[32m+[m[32m# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.[m
[32m+[m[32mDEFAULT_JVM_OPTS=""[m
[32m+[m
[32m+[m[32mAPP_NAME="Gradle"[m
[32m+[m[32mAPP_BASE_NAME=`basename "$0"`[m
[32m+[m
[32m+[m[32m# Use the maximum available, or set MAX_FD != -1 to use that value.[m
[32m+[m[32mMAX_FD="maximum"[m
[32m+[m
[32m+[m[32mwarn ( ) {[m
[32m+[m[32m    echo "$*"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdie ( ) {[m
[32m+[m[32m    echo[m
[32m+[m[32m    echo "$*"[m
[32m+[m[32m    echo[m
[32m+[m[32m    exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# OS specific support (must be 'true' or 'false').[m
[32m+[m[32mcygwin=false[m
[32m+[m[32mmsys=false[m
[32m+[m[32mdarwin=false[m
[32m+[m[32mcase "`uname`" in[m
[32m+[m[32m  CYGWIN* )[m
[32m+[m[32m    cygwin=true[m
[32m+[m[32m    ;;[m
[32m+[m[32m  Darwin* )[m
[32m+[m[32m    darwin=true[m
[32m+[m[32m    ;;[m
[32m+[m[32m  MINGW* )[m
[32m+[m[32m    msys=true[m
[32m+[m[32m    ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# For Cygwin, ensure paths are in UNIX format before anything is touched.[m
[32m+[m[32mif $cygwin ; then[m
[32m+[m[32m    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# Attempt to set APP_HOME[m
[32m+[m[32m# Resolve links: $0 may be a link[m
[32m+[m[32mPRG="$0"[m
[32m+[m[32m# Need this for relative symlinks.[m
[32m+[m[32mwhile [ -h "$PRG" ] ; do[m
[32m+[m[32m    ls=`ls -ld "$PRG"`[m
[32m+[m[32m    link=`expr "$ls" : '.*-> \(.*\)$'`[m
[32m+[m[32m    if expr "$link" : '/.*' > /dev/null; then[m
[32m+[m[32m        PRG="$link"[m
[32m+[m[32m    else[m
[32m+[m[32m        PRG=`dirname "$PRG"`"/$link"[m
[32m+[m[32m    fi[m
[32m+[m[32mdone[m
[32m+[m[32mSAVED="`pwd`"[m
[32m+[m[32mcd "`dirname \"$PRG\"`/" >&-[m
[32m+[m[32mAPP_HOME="`pwd -P`"[m
[32m+[m[32mcd "$SAVED" >&-[m
[32m+[m
[32m+[m[32mCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar[m
[32m+[m
[32m+[m[32m# Determine the Java command to use to start the JVM.[m
[32m+[m[32mif [ -n "$JAVA_HOME" ] ; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then[m
[32m+[m[32m        # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m        JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m    else[m
[32m+[m[32m        JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m    fi[m
[32m+[m[32m    if [ ! -x "$JAVACMD" ] ; then[m
[32m+[m[32m        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME[m
[32m+[m
[32m+[m[32mPlease set the JAVA_HOME variable in your environment to match the[m
[32m+[m[32mlocation of your Java installation."[m
[32m+[m[32m    fi[m
[32m+[m[32melse[m
[32m+[m[32m    JAVACMD="java"[m
[32m+[m[32m    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.[m
[32m+[m
[32m+[m[32mPlease set the JAVA_HOME variable in your environment to match the[m
[32m+[m[32mlocation of your Java installation."[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# Increase the maximum file descriptors if we can.[m
[32m+[m[32mif [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then[m
[32m+[m[32m    MAX_FD_LIMIT=`ulimit -H -n`[m
[32m+[m[32m    if [ $? -eq 0 ] ; then[m
[32m+[m[32m        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then[m
[32m+[m[32m            MAX_FD="$MAX_FD_LIMIT"[m
[32m+[m[32m        fi[m
[32m+[m[32m        ulimit -n $MAX_FD[m
[32m+[m[32m        if [ $? -ne 0 ] ; then[m
[32m+[m[32m            warn "Could not set maximum file descriptor limit: $MAX_FD"[m
[32m+[m[32m        fi[m
[32m+[m[32m    else[m
[32m+[m[32m        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"[m
[32m+[m[32m    fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# For Darwin, add options to specify how the application appears in the dock[m
[32m+[m[32mif $darwin; then[m
[32m+[m[32m    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# For Cygwin, switch paths to Windows format before running java[m
[32m+[m[32mif $cygwin ; then[m
[32m+[m[32m    APP_HOME=`cygpath --path --mixed "$APP_HOME"`[m
[32m+[m[32m    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`[m
[32m+[m
[32m+[m[32m    # We build the pattern for arguments to be converted via cygpath[m
[32m+[m[32m    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`[m
[32m+[m[32m    SEP=""[m
[32m+[m[32m    for dir in $ROOTDIRSRAW ; do[m
[32m+[m[32m        ROOTDIRS="$ROOTDIRS$SEP$dir"[m
[32m+[m[32m        SEP="|"[m
[32m+[m[32m    done[m
[32m+[m[32m    OURCYGPATTERN="(^($ROOTDIRS))"[m
[32m+[m[32m    # Add a user-defined pattern to the cygpath arguments[m
[32m+[m[32m    if [ "$GRADLE_CYGPATTERN" != "" ] ; then[m
[32m+[m[32m        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"[m
[32m+[m[32m    fi[m
[32m+[m[32m    # Now convert the arguments - kludge to limit ourselves to /bin/sh[m
[32m+[m[32m    i=0[m
[32m+[m[32m    for arg in "$@" ; do[m
[32m+[m[32m        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`[m
[32m+[m[32m        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option[m
[32m+[m
[32m+[m[32m        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition[m
[32m+[m[32m            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`[m
[32m+[m[32m        else[m
[32m+[m[32m            eval `echo args$i`="\"$arg\""[m
[32m+[m[32m        fi[m
[32m+[m[32m        i=$((i+1))[m
[32m+[m[32m    done[m
[32m+[m[32m    case $i in[m
[32m+[m[32m        (0) set -- ;;[m
[32m+[m[32m        (1) set -- "$args0" ;;[m
[32m+[m[32m        (2) set -- "$args0" "$args1" ;;[m
[32m+[m[32m        (3) set -- "$args0" "$args1" "$args2" ;;[m
[32m+[m[32m        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;[m
[32m+[m[32m        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;[m
[32m+[m[32m        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;[m
[32m+[m[32m        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;[m
[32m+[m[32m        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;[m
[32m+[m[32m        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;[m
[32m+[m[32m    esac[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules[m
[32m+[m[32mfunction splitJvmOpts() {[m
[32m+[m[32m    JVM_OPTS=("$@")[m
[32m+[m[32m}[m
[32m+[m[32meval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS[m
[32m+[m[32mJVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"[m
[32m+[m
[32m+[m[32mexec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"[m
[1mdiff --git a/gradlew.bat b/gradlew.bat[m
[1mnew file mode 100644[m
[1mindex 0000000..8a0b282[m
[1m--- /dev/null[m
[1m+++ b/gradlew.bat[m
[36m@@ -0,0 +1,90 @@[m
[32m+[m[32m@if "%DEBUG%" == "" @echo off[m
[32m+[m[32m@rem ##########################################################################[m
[32m+[m[32m@rem[m
[32m+[m[32m@rem  Gradle startup script for Windows[m
[32m+[m[32m@rem[m
[32m+[m[32m@rem ##########################################################################[m
[32m+[m
[32m+[m[32m@rem Set local scope for the variables with windows NT shell[m
[32m+[m[32mif "%OS%"=="Windows_NT" setlocal[m
[32m+[m
[32m+[m[32m@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.[m
[32m+[m[32mset DEFAULT_JVM_OPTS=[m
[32m+[m
[32m+[m[32mset DIRNAME=%~dp0[m
[32m+[m[32mif "%DIRNAME%" == "" set DIRNAME=.[m
[32m+[m[32mset APP_BASE_NAME=%~n0[m
[32m+[m[32mset APP_HOME=%DIRNAME%[m
[32m+[m
[32m+[m[32m@rem Find java.exe[m
[32m+[m[32mif defined JAVA_HOME goto findJavaFromJavaHome[m
[32m+[m
[32m+[m[32mset JAVA_EXE=java.exe[m
[32m+[m[32m%JAVA_EXE% -version >NUL 2>&1[m
[32m+[m[32mif "%ERRORLEVEL%" == "0" goto init[m
[32m+[m
[32m+[m[32mecho.[m
[32m+[m[32mecho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.[m
[32m+[m[32mecho.[m
[32m+[m[32mecho Please set the JAVA_HOME variable in your environment to match the[m
[32m+[m[32mecho location of your Java installation.[m
[32m+[m
[32m+[m[32mgoto fail[m
[32m+[m
[32m+[m[32m:findJavaFromJavaHome[m
[32m+[m[32mset JAVA_HOME=%JAVA_HOME:"=%[m
[32m+[m[32mset JAVA_EXE=%JAVA_HOME%/bin/java.exe[m
[32m+[m
[32m+[m[32mif exist "%JAVA_EXE%" goto init[m
[32m+[m
[32m+[m[32mecho.[m
[32m+[m[32mecho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%[m
[32m+[m[32mecho.[m
[32m+[m[32mecho Please set the JAVA_HOME variable in your environment to match the[m
[32m+[m[32mecho location of your Java installation.[m
[32m+[m
[32m+[m[32mgoto fail[m
[32m+[m
[32m+[m[32m:init[m
[32m+[m[32m@rem Get command-line arguments, handling Windowz variants[m
[32m+[m
[32m+[m[32mif not "%OS%" == "Windows_NT" goto win9xME_args[m
[32m+[m[32mif "%@eval[2+2]" == "4" goto 4NT_args[m
[32m+[m
[32m+[m[32m:win9xME_args[m
[32m+[m[32m@rem Slurp the command line arguments.[m
[32m+[m[32mset CMD_LINE_ARGS=[m
[32m+[m[32mset _SKIP=2[m
[32m+[m
[32m+[m[32m:win9xME_args_slurp[m
[32m+[m[32mif "x%~1" == "x" goto execute[m
[32m+[m
[32m+[m[32mset CMD_LINE_ARGS=%*[m
[32m+[m[32mgoto execute[m
[32m+[m
[32m+[m[32m:4NT_args[m
[32m+[m[32m@rem Get arguments from the 4NT Shell from JP Software[m
[32m+[m[32mset CMD_LINE_ARGS=%$[m
[32m+[m
[32m+[m[32m:execute[m
[32m+[m[32m@rem Setup the command line[m
[32m+[m
[32m+[m[32mset CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar[m
[32m+[m
[32m+[m[32m@rem Execute Gradle[m
[32m+[m[32m"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%[m
[32m+[m
[32m+[m[32m:end[m
[32m+[m[32m@rem End local scope for the variables with windows NT shell[m
[32m+[m[32mif "%ERRORLEVEL%"=="0" goto mainEnd[m
[32m+[m
[32m+[m[32m:fail[m
[32m+[m[32mrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of[m
[32m+[m[32mrem the _cmd.exe /c_ return code![m
[32m+[m[32mif  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1[m
[32m+[m[32mexit /b 1[m
[32m+[m
[32m+[m[32m:mainEnd[m
[32m+[m[32mif "%OS%"=="Windows_NT" endlocal[m
[32m+[m
[32m+[m[32m:omega[m
[1mdiff --git a/settings.gradle b/settings.gradle[m
[1mnew file mode 100644[m
[1mindex 0000000..77ae463[m
[1m--- /dev/null[m
[1m+++ b/settings.gradle[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32minclude 'desktop', 'android', 'core'[m
\ No newline at end of file[m
